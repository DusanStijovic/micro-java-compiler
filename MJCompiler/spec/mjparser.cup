package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
    
    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}




terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, LPAREN;
terminal COMMA, EQUAL, RETURN, PLUS

terminal Integer NUMBER
terminal String IDENT;


nonterminal Program, VarDeclList, MethodDeclList, VarDecl, Type, MethodDecl; 
nonterminal FormPars, StatementLst, FormalParamList, FormalParamDecl,Statement
nonterminal Designator, Expr, Term, Addop, Factor, ActualPars, ActualParamList

Program ::=  (Program) PROG IDENT VarDeclList LBRACE MethodDeclList RBRACE;

VarDeclList ::=(VarDeclarations) VarDeclList VarDecl
			 | 
             (NoVarDecl)/*epsilon*/
             ; 

VarDecl ::=(VarDecl) Type:varType IDENT:varName SEMT;  

MethodDeclList ::= (MethodDeclerations) MethodDeclList MethodDecl        
				|
				(NoMethodDecl)/*epsilon*/
				;   

MethodDecl ::= (MethodDecl) Type:retType IDENT:methodName LPAREN FormParams RPAREN VarDeclList LBRACE StatementList RBRACE;


FormParams = (FormParams) FormalParamList
			|
			(NoFormParams) /*epsilon*/
			; 
FormalParamList ::=(FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDeczs)FormalParamDecl
				;
				

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt)/*epsilon*/
				;				
				
Statement ::= (Assignment) Designator::dest EQUAL Expr:e SEMI
			|
			(PrintStmt) Print LPAREN Expr RPAREN SEMI
			|
			(ReturnExpr) RETURN Expr:t SEMI
			|
			(ResturnNoExpr) RETURN SEMI
			;	

Expr ::= (AddExpr) Expr:te Addop Term:t
	  |
	  (TermExpr) Term:t
	  ;
	  
Term ::= (Term) Factor:t;
	  
Factor::= NUMBER
		|
		(Var) Designator:d
		|
		(FuncCall) Designator:func LPAREN ActualPars RPAREN	  
	  	;
	  	
ActualPars ::= (Actuals) ActualParamList
			| 
			(NoActuals) /*epsilon*/
			;				
			
ActualParamList ::=(ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr 
				;
				
Designator ::= (Designator) IDENT:name;

Type:: = (Type) IDENT:typeName;

Addop ::= (Addop) PLUS;
 				
