INFO  16:51:26,761 - Compiling source file: C:\Users\sd170145d\OneDrive - student.etf.bg.ac.rs\Softversko Inzenjerstvo\Forth year\Seventh semester\PP1\projekat\workspace\MJCompiler\test\program.mj
INFO  16:51:26,779 - #1 program
INFO  16:51:26,779 - #4 p
INFO  16:51:26,779 - #22 const
INFO  16:51:26,779 - #4 int
INFO  16:51:26,779 - #4 size
INFO  16:51:26,779 - #7 =
INFO  16:51:26,779 - #5 10
INFO  16:51:26,780 - #9 ;
INFO  16:51:26,780 - #19 class
INFO  16:51:26,780 - #4 Table
INFO  16:51:26,780 - #12 {
INFO  16:51:26,780 - #4 int
INFO  16:51:26,780 - #4 pos
INFO  16:51:26,780 - #47 [
INFO  16:51:26,780 - #48 ]
INFO  16:51:26,780 - #8 ,
INFO  16:51:26,780 - #4 neg
INFO  16:51:26,780 - #47 [
INFO  16:51:26,781 - #48 ]
INFO  16:51:26,781 - #9 ;
INFO  16:51:26,781 - #12 {
INFO  16:51:26,781 - #15 void
INFO  16:51:26,781 - #4 putp
INFO  16:51:26,781 - #10 (
INFO  16:51:26,781 - #4 int
INFO  16:51:26,781 - #4 a
INFO  16:51:26,781 - #8 ,
INFO  16:51:26,781 - #4 int
INFO  16:51:26,781 - #4 idx
INFO  16:51:26,781 - #11 )
INFO  16:51:26,781 - #12 {
INFO  16:51:26,781 - #4 this
INFO  16:51:26,782 - #46 .
INFO  16:51:26,782 - #4 pos
INFO  16:51:26,782 - #47 [
INFO  16:51:26,782 - #4 idx
INFO  16:51:26,782 - #48 ]
INFO  16:51:26,782 - #7 =
INFO  16:51:26,782 - #4 a
INFO  16:51:26,782 - #9 ;
INFO  16:51:26,782 - #13 }
INFO  16:51:26,782 - #15 void
INFO  16:51:26,782 - #4 putn
INFO  16:51:26,782 - #10 (
INFO  16:51:26,783 - #4 int
INFO  16:51:26,783 - #4 a
INFO  16:51:26,783 - #8 ,
INFO  16:51:26,783 - #4 int
INFO  16:51:26,783 - #4 idx
INFO  16:51:26,783 - #11 )
INFO  16:51:26,783 - #12 {
INFO  16:51:26,783 - #4 this
INFO  16:51:26,783 - #46 .
INFO  16:51:26,783 - #4 neg
INFO  16:51:26,784 - #47 [
INFO  16:51:26,784 - #4 idx
INFO  16:51:26,784 - #48 ]
INFO  16:51:26,784 - #7 =
INFO  16:51:26,784 - #4 a
INFO  16:51:26,784 - #9 ;
INFO  16:51:26,784 - #13 }
INFO  16:51:26,784 - #4 int
INFO  16:51:26,785 - #4 getp
INFO  16:51:26,785 - #10 (
INFO  16:51:26,785 - #4 int
INFO  16:51:26,785 - #4 idx
INFO  16:51:26,785 - #11 )
INFO  16:51:26,785 - #12 {
INFO  16:51:26,785 - #3 return
INFO  16:51:26,785 - #4 pos
INFO  16:51:26,785 - #47 [
INFO  16:51:26,785 - #4 idx
INFO  16:51:26,785 - #48 ]
INFO  16:51:26,785 - #9 ;
INFO  16:51:26,785 - #13 }
INFO  16:51:26,785 - #4 int
INFO  16:51:26,785 - #4 getn
INFO  16:51:26,785 - #10 (
INFO  16:51:26,786 - #4 int
INFO  16:51:26,786 - #4 idx
INFO  16:51:26,786 - #11 )
INFO  16:51:26,786 - #12 {
INFO  16:51:26,786 - #3 return
INFO  16:51:26,786 - #4 neg
INFO  16:51:26,786 - #47 [
INFO  16:51:26,786 - #4 idx
INFO  16:51:26,786 - #48 ]
INFO  16:51:26,786 - #9 ;
INFO  16:51:26,786 - #13 }
INFO  16:51:26,786 - #13 }
INFO  16:51:26,786 - #13 }
INFO  16:51:26,786 - #4 Table
INFO  16:51:26,786 - #4 val
INFO  16:51:26,787 - #9 ;
INFO  16:51:26,787 - #12 {
INFO  16:51:26,787 - #15 void
INFO  16:51:26,787 - #4 f
INFO  16:51:26,787 - #10 (
INFO  16:51:26,787 - #4 char
INFO  16:51:26,787 - #4 ch
INFO  16:51:26,787 - #8 ,
INFO  16:51:26,787 - #4 int
INFO  16:51:26,787 - #4 a
INFO  16:51:26,787 - #8 ,
INFO  16:51:26,788 - #4 int
INFO  16:51:26,788 - #4 arg
INFO  16:51:26,788 - #11 )
INFO  16:51:26,788 - #4 int
INFO  16:51:26,788 - #4 x
INFO  16:51:26,788 - #9 ;
INFO  16:51:26,788 - #12 {
INFO  16:51:26,788 - #4 x
INFO  16:51:26,788 - #7 =
INFO  16:51:26,788 - #4 arg
INFO  16:51:26,788 - #9 ;
INFO  16:51:26,788 - #13 }
INFO  16:51:26,788 - #15 void
INFO  16:51:26,788 - #4 main
INFO  16:51:26,788 - #10 (
INFO  16:51:26,788 - #11 )
INFO  16:51:26,788 - #4 int
INFO  16:51:26,788 - #4 x
INFO  16:51:26,789 - #8 ,
INFO  16:51:26,789 - #4 i
INFO  16:51:26,789 - #9 ;
INFO  16:51:26,789 - #4 char
INFO  16:51:26,789 - #4 c
INFO  16:51:26,789 - #9 ;
INFO  16:51:26,789 - #12 {
INFO  16:51:26,789 - #4 val
INFO  16:51:26,789 - #7 =
INFO  16:51:26,790 - #27 new
INFO  16:51:26,790 - #4 Table
INFO  16:51:26,795 - #9 ;
INFO  16:51:26,795 - #4 val
INFO  16:51:26,795 - #46 .
INFO  16:51:26,795 - #4 pos
INFO  16:51:26,795 - #7 =
INFO  16:51:26,795 - #27 new
INFO  16:51:26,795 - #4 int
INFO  16:51:26,795 - #47 [
INFO  16:51:26,795 - #4 size
INFO  16:51:26,795 - #48 ]
INFO  16:51:26,795 - #9 ;
INFO  16:51:26,795 - #4 val
INFO  16:51:26,795 - #46 .
INFO  16:51:26,795 - #4 neg
INFO  16:51:26,795 - #7 =
INFO  16:51:26,796 - #27 new
INFO  16:51:26,796 - #4 int
INFO  16:51:26,796 - #47 [
INFO  16:51:26,796 - #4 size
INFO  16:51:26,796 - #48 ]
INFO  16:51:26,796 - #9 ;
INFO  16:51:26,796 - #4 i
INFO  16:51:26,796 - #7 =
INFO  16:51:26,796 - #5 0
INFO  16:51:26,796 - #9 ;
INFO  16:51:26,796 - #25 do
INFO  16:51:26,796 - #12 {
INFO  16:51:26,796 - #4 val
INFO  16:51:26,796 - #46 .
INFO  16:51:26,796 - #4 putp
INFO  16:51:26,796 - #10 (
INFO  16:51:26,796 - #5 0
INFO  16:51:26,797 - #8 ,
INFO  16:51:26,797 - #4 i
INFO  16:51:26,797 - #11 )
INFO  16:51:26,797 - #9 ;
INFO  16:51:26,797 - #4 val
INFO  16:51:26,797 - #46 .
INFO  16:51:26,797 - #4 putn
INFO  16:51:26,797 - #10 (
INFO  16:51:26,797 - #5 0
INFO  16:51:26,797 - #8 ,
INFO  16:51:26,797 - #4 i
INFO  16:51:26,797 - #11 )
INFO  16:51:26,797 - #9 ;
INFO  16:51:26,797 - #4 i
INFO  16:51:26,797 - #44 ++
INFO  16:51:26,798 - #9 ;
INFO  16:51:26,798 - #13 }
INFO  16:51:26,798 - #26 while
INFO  16:51:26,798 - #10 (
INFO  16:51:26,798 - #4 i
INFO  16:51:26,798 - #40 <
INFO  16:51:26,798 - #4 size
INFO  16:51:26,798 - #11 )
INFO  16:51:26,798 - #9 ;
INFO  16:51:26,798 - #4 f
INFO  16:51:26,798 - #10 (
INFO  16:51:26,798 - #4 c
INFO  16:51:26,798 - #8 ,
INFO  16:51:26,798 - #4 x
INFO  16:51:26,798 - #8 ,
INFO  16:51:26,798 - #4 i
INFO  16:51:26,799 - #11 )
INFO  16:51:26,799 - #9 ;
INFO  16:51:26,799 - #28 read
INFO  16:51:26,799 - #10 (
INFO  16:51:26,799 - #4 x
INFO  16:51:26,799 - #11 )
INFO  16:51:26,799 - #9 ;
INFO  16:51:26,799 - #4 true
INFO  16:51:26,799 - #25 do
INFO  16:51:26,799 - #12 {
INFO  16:51:26,799 - #23 if
INFO  16:51:26,799 - #10 (
INFO  16:51:26,799 - #4 x
INFO  16:51:26,799 - #41 <=
INFO  16:51:26,799 - #5 0
INFO  16:51:26,799 - #11 )
INFO  16:51:26,799 - #18 break
INFO  16:51:26,800 - #9 ;
INFO  16:51:26,800 - #23 if
INFO  16:51:26,800 - #10 (
INFO  16:51:26,800 - #5 0
INFO  16:51:26,800 - #41 <=
INFO  16:51:26,800 - #4 x
INFO  16:51:26,800 - #42 &&
INFO  16:51:26,800 - #4 x
INFO  16:51:26,800 - #40 <
INFO  16:51:26,800 - #4 size
INFO  16:51:26,800 - #11 )
INFO  16:51:26,800 - #12 {
INFO  16:51:26,800 - #4 val
INFO  16:51:26,800 - #46 .
INFO  16:51:26,800 - #4 putp
INFO  16:51:26,800 - #10 (
INFO  16:51:26,800 - #4 val
INFO  16:51:26,801 - #46 .
INFO  16:51:26,801 - #4 getp
INFO  16:51:26,801 - #10 (
INFO  16:51:26,801 - #4 x
INFO  16:51:26,801 - #11 )
INFO  16:51:26,801 - #6 +
INFO  16:51:26,801 - #5 1
INFO  16:51:26,801 - #11 )
INFO  16:51:26,801 - #9 ;
INFO  16:51:26,801 - #13 }
INFO  16:51:26,801 - #21 else
INFO  16:51:26,801 - #23 if
INFO  16:51:26,801 - #10 (
INFO  16:51:26,801 - #32 -
INFO  16:51:26,801 - #4 size
INFO  16:51:26,801 - #40 <
INFO  16:51:26,801 - #4 x
INFO  16:51:26,801 - #42 &&
INFO  16:51:26,801 - #4 x
INFO  16:51:26,801 - #40 <
INFO  16:51:26,801 - #5 0
INFO  16:51:26,802 - #11 )
INFO  16:51:26,802 - #12 {
INFO  16:51:26,802 - #4 val
INFO  16:51:26,802 - #46 .
INFO  16:51:26,802 - #4 putn
INFO  16:51:26,802 - #10 (
INFO  16:51:26,802 - #4 val
INFO  16:51:26,802 - #46 .
INFO  16:51:26,802 - #4 getn
INFO  16:51:26,802 - #10 (
INFO  16:51:26,802 - #32 -
INFO  16:51:26,802 - #4 x
INFO  16:51:26,802 - #11 )
INFO  16:51:26,802 - #6 +
INFO  16:51:26,803 - #5 1
INFO  16:51:26,803 - #11 )
INFO  16:51:26,803 - #9 ;
INFO  16:51:26,803 - #13 }
INFO  16:51:26,803 - #28 read
INFO  16:51:26,803 - #10 (
INFO  16:51:26,803 - #4 x
INFO  16:51:26,803 - #11 )
INFO  16:51:26,803 - #9 ;
INFO  16:51:26,803 - #13 }
INFO  16:51:26,803 - #26 while
INFO  16:51:26,803 - #10 (
INFO  16:51:26,803 - #4 true
INFO  16:51:26,803 - #11 )
INFO  16:51:26,803 - #9 ;
INFO  16:51:26,803 - #2 print
INFO  16:51:26,803 - #10 (
INFO  16:51:26,803 - #4 x
INFO  16:51:26,803 - #40 <
INFO  16:51:26,803 - #5 0
INFO  16:51:26,803 - #49 ?
INFO  16:51:26,804 - #32 -
INFO  16:51:26,804 - #50 :
INFO  16:51:26,804 - #6 +
INFO  16:51:26,804 - #11 )
INFO  16:51:26,804 - #9 ;
INFO  16:51:26,804 - #13 }
INFO  16:51:26,804 - #13 }
