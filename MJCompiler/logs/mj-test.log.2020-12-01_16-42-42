INFO  16:42:06,831 - Compiling source file: C:\Users\sd170145d\OneDrive - student.etf.bg.ac.rs\Softversko Inzenjerstvo\Forth year\Seventh semester\PP1\projekat\workspace\MJCompiler\test\program.mj
INFO  16:42:06,847 - #1 program
INFO  16:42:06,847 - #4 p
INFO  16:42:06,847 - #22 const
INFO  16:42:06,847 - #4 int
INFO  16:42:06,847 - #4 size
INFO  16:42:06,847 - #7 =
INFO  16:42:06,847 - #5 10
INFO  16:42:06,847 - #9 ;
INFO  16:42:06,847 - #19 class
INFO  16:42:06,848 - #4 Table
INFO  16:42:06,848 - #12 {
INFO  16:42:06,848 - #4 int
INFO  16:42:06,848 - #4 pos
INFO  16:42:06,848 - #47 [
INFO  16:42:06,848 - #48 ]
INFO  16:42:06,848 - #8 ,
INFO  16:42:06,848 - #4 neg
INFO  16:42:06,848 - #47 [
INFO  16:42:06,848 - #48 ]
INFO  16:42:06,849 - #9 ;
INFO  16:42:06,849 - #12 {
INFO  16:42:06,849 - #15 void
INFO  16:42:06,849 - #4 putp
INFO  16:42:06,849 - #10 (
INFO  16:42:06,849 - #4 int
INFO  16:42:06,849 - #4 a
INFO  16:42:06,850 - #8 ,
INFO  16:42:06,850 - #4 int
INFO  16:42:06,850 - #4 idx
INFO  16:42:06,850 - #11 )
INFO  16:42:06,850 - #12 {
INFO  16:42:06,850 - #4 this
INFO  16:42:06,851 - #46 .
INFO  16:42:06,851 - #4 pos
INFO  16:42:06,851 - #47 [
INFO  16:42:06,851 - #4 idx
INFO  16:42:06,851 - #48 ]
INFO  16:42:06,851 - #7 =
INFO  16:42:06,851 - #4 a
INFO  16:42:06,851 - #9 ;
INFO  16:42:06,851 - #13 }
INFO  16:42:06,852 - #15 void
INFO  16:42:06,852 - #4 putn
INFO  16:42:06,852 - #10 (
INFO  16:42:06,852 - #4 int
INFO  16:42:06,852 - #4 a
INFO  16:42:06,852 - #8 ,
INFO  16:42:06,852 - #4 int
INFO  16:42:06,853 - #4 idx
INFO  16:42:06,853 - #11 )
INFO  16:42:06,853 - #12 {
INFO  16:42:06,854 - #4 this
INFO  16:42:06,854 - #46 .
INFO  16:42:06,854 - #4 neg
INFO  16:42:06,854 - #47 [
INFO  16:42:06,855 - #4 idx
INFO  16:42:06,855 - #48 ]
INFO  16:42:06,855 - #7 =
INFO  16:42:06,856 - #4 a
INFO  16:42:06,856 - #9 ;
INFO  16:42:06,856 - #13 }
INFO  16:42:06,858 - #4 int
INFO  16:42:06,859 - #4 getp
INFO  16:42:06,859 - #10 (
INFO  16:42:06,859 - #4 int
INFO  16:42:06,860 - #4 idx
INFO  16:42:06,860 - #11 )
INFO  16:42:06,860 - #12 {
INFO  16:42:06,860 - #3 return
INFO  16:42:06,864 - #4 pos
INFO  16:42:06,865 - #47 [
INFO  16:42:06,865 - #4 idx
INFO  16:42:06,865 - #48 ]
INFO  16:42:06,865 - #9 ;
INFO  16:42:06,865 - #13 }
INFO  16:42:06,865 - #4 int
INFO  16:42:06,865 - #4 getn
INFO  16:42:06,865 - #10 (
INFO  16:42:06,865 - #4 int
INFO  16:42:06,865 - #4 idx
INFO  16:42:06,865 - #11 )
INFO  16:42:06,865 - #12 {
INFO  16:42:06,865 - #3 return
INFO  16:42:06,866 - #4 neg
INFO  16:42:06,866 - #47 [
INFO  16:42:06,866 - #4 idx
INFO  16:42:06,866 - #48 ]
INFO  16:42:06,866 - #9 ;
INFO  16:42:06,866 - #13 }
INFO  16:42:06,866 - #13 }
INFO  16:42:06,866 - #13 }
INFO  16:42:06,866 - #4 Table
INFO  16:42:06,867 - #4 val
INFO  16:42:06,867 - #9 ;
INFO  16:42:06,867 - #12 {
INFO  16:42:06,867 - #15 void
INFO  16:42:06,867 - #4 f
INFO  16:42:06,868 - #10 (
INFO  16:42:06,868 - #4 char
INFO  16:42:06,868 - #4 ch
INFO  16:42:06,869 - #8 ,
INFO  16:42:06,869 - #4 int
INFO  16:42:06,869 - #4 a
INFO  16:42:06,869 - #8 ,
INFO  16:42:06,869 - #4 int
INFO  16:42:06,869 - #4 arg
INFO  16:42:06,869 - #11 )
INFO  16:42:06,869 - #4 int
INFO  16:42:06,870 - #4 x
INFO  16:42:06,870 - #9 ;
INFO  16:42:06,870 - #12 {
INFO  16:42:06,870 - #4 x
INFO  16:42:06,870 - #7 =
INFO  16:42:06,870 - #4 arg
INFO  16:42:06,870 - #9 ;
INFO  16:42:06,871 - #13 }
INFO  16:42:06,871 - #15 void
INFO  16:42:06,871 - #4 main
INFO  16:42:06,871 - #10 (
INFO  16:42:06,872 - #11 )
INFO  16:42:06,872 - #4 int
INFO  16:42:06,872 - #4 x
INFO  16:42:06,872 - #8 ,
INFO  16:42:06,872 - #4 i
INFO  16:42:06,873 - #9 ;
INFO  16:42:06,873 - #4 char
INFO  16:42:06,874 - #4 c
INFO  16:42:06,874 - #9 ;
INFO  16:42:06,875 - #12 {
INFO  16:42:06,875 - #4 val
INFO  16:42:06,875 - #7 =
INFO  16:42:06,876 - #27 new
INFO  16:42:06,876 - #4 Table
INFO  16:42:06,876 - #9 ;
INFO  16:42:06,876 - #4 val
INFO  16:42:06,876 - #46 .
INFO  16:42:06,876 - #4 pos
INFO  16:42:06,876 - #7 =
INFO  16:42:06,876 - #27 new
INFO  16:42:06,876 - #4 int
INFO  16:42:06,876 - #47 [
INFO  16:42:06,876 - #4 size
INFO  16:42:06,877 - #48 ]
INFO  16:42:06,877 - #9 ;
INFO  16:42:06,881 - #4 val
INFO  16:42:06,881 - #46 .
INFO  16:42:06,881 - #4 neg
INFO  16:42:06,881 - #7 =
INFO  16:42:06,881 - #27 new
INFO  16:42:06,881 - #4 int
INFO  16:42:06,881 - #47 [
INFO  16:42:06,882 - #4 size
INFO  16:42:06,882 - #48 ]
INFO  16:42:06,882 - #9 ;
INFO  16:42:06,882 - #4 i
INFO  16:42:06,882 - #7 =
INFO  16:42:06,882 - #5 0
INFO  16:42:06,882 - #9 ;
INFO  16:42:06,884 - #25 do
INFO  16:42:06,884 - #12 {
INFO  16:42:06,884 - #4 val
INFO  16:42:06,884 - #46 .
INFO  16:42:06,884 - #4 putp
INFO  16:42:06,884 - #10 (
INFO  16:42:06,884 - #5 0
INFO  16:42:06,884 - #8 ,
INFO  16:42:06,884 - #4 i
INFO  16:42:06,884 - #11 )
INFO  16:42:06,885 - #9 ;
INFO  16:42:06,885 - #4 val
INFO  16:42:06,885 - #46 .
INFO  16:42:06,885 - #4 putn
INFO  16:42:06,885 - #10 (
INFO  16:42:06,886 - #5 0
INFO  16:42:06,886 - #8 ,
INFO  16:42:06,886 - #4 i
INFO  16:42:06,886 - #11 )
INFO  16:42:06,886 - #9 ;
INFO  16:42:06,886 - #4 i
INFO  16:42:06,886 - #44 ++
INFO  16:42:06,886 - #9 ;
INFO  16:42:06,886 - #13 }
INFO  16:42:06,886 - #26 while
INFO  16:42:06,886 - #10 (
INFO  16:42:06,886 - #4 i
INFO  16:42:06,886 - #40 <
INFO  16:42:06,886 - #4 size
INFO  16:42:06,886 - #11 )
INFO  16:42:06,887 - #9 ;
INFO  16:42:06,887 - #4 f
INFO  16:42:06,887 - #10 (
INFO  16:42:06,887 - #4 c
INFO  16:42:06,887 - #8 ,
INFO  16:42:06,887 - #4 x
INFO  16:42:06,887 - #8 ,
INFO  16:42:06,887 - #4 i
INFO  16:42:06,887 - #11 )
INFO  16:42:06,888 - #9 ;
INFO  16:42:06,888 - #28 read
INFO  16:42:06,888 - #10 (
INFO  16:42:06,888 - #4 x
INFO  16:42:06,888 - #11 )
INFO  16:42:06,888 - #9 ;
INFO  16:42:06,888 - #4 true
INFO  16:42:06,888 - #25 do
INFO  16:42:06,889 - #12 {
INFO  16:42:06,889 - #23 if
INFO  16:42:06,889 - #10 (
INFO  16:42:06,889 - #4 x
INFO  16:42:06,889 - #41 <=
INFO  16:42:06,889 - #5 0
INFO  16:42:06,889 - #11 )
INFO  16:42:06,889 - #18 break
INFO  16:42:06,889 - #9 ;
INFO  16:42:06,889 - #23 if
INFO  16:42:06,889 - #10 (
INFO  16:42:06,890 - #5 0
INFO  16:42:06,890 - #41 <=
INFO  16:42:06,890 - #4 x
INFO  16:42:06,890 - #42 &&
INFO  16:42:06,890 - #4 x
INFO  16:42:06,890 - #40 <
INFO  16:42:06,890 - #4 size
INFO  16:42:06,890 - #11 )
INFO  16:42:06,890 - #12 {
INFO  16:42:06,890 - #4 val
INFO  16:42:06,890 - #46 .
INFO  16:42:06,891 - #4 putp
INFO  16:42:06,891 - #10 (
INFO  16:42:06,891 - #4 val
INFO  16:42:06,891 - #46 .
INFO  16:42:06,891 - #4 getp
INFO  16:42:06,891 - #10 (
INFO  16:42:06,891 - #4 x
INFO  16:42:06,891 - #11 )
INFO  16:42:06,891 - #6 +
INFO  16:42:06,891 - #5 1
INFO  16:42:06,891 - #11 )
INFO  16:42:06,891 - #9 ;
INFO  16:42:06,891 - #13 }
INFO  16:42:06,892 - #21 else
INFO  16:42:06,892 - #23 if
INFO  16:42:06,892 - #10 (
INFO  16:42:06,892 - #32 -
INFO  16:42:06,892 - #4 size
INFO  16:42:06,892 - #40 <
INFO  16:42:06,892 - #4 x
INFO  16:42:06,892 - #42 &&
INFO  16:42:06,892 - #4 x
INFO  16:42:06,892 - #40 <
INFO  16:42:06,892 - #5 0
INFO  16:42:06,893 - #11 )
INFO  16:42:06,893 - #12 {
INFO  16:42:06,893 - #4 val
INFO  16:42:06,893 - #46 .
INFO  16:42:06,894 - #4 putn
INFO  16:42:06,894 - #10 (
INFO  16:42:06,894 - #4 val
INFO  16:42:06,895 - #46 .
INFO  16:42:06,895 - #4 getn
INFO  16:42:06,895 - #10 (
INFO  16:42:06,895 - #32 -
INFO  16:42:06,895 - #4 x
INFO  16:42:06,895 - #11 )
INFO  16:42:06,895 - #6 +
INFO  16:42:06,895 - #5 1
INFO  16:42:06,896 - #11 )
INFO  16:42:06,896 - #9 ;
INFO  16:42:06,896 - #13 }
INFO  16:42:06,896 - #28 read
INFO  16:42:06,896 - #10 (
INFO  16:42:06,896 - #4 x
INFO  16:42:06,896 - #11 )
INFO  16:42:06,896 - #9 ;
INFO  16:42:06,896 - #13 }
INFO  16:42:06,896 - #26 while
INFO  16:42:06,896 - #10 (
INFO  16:42:06,896 - #4 true
INFO  16:42:06,897 - #11 )
INFO  16:42:06,897 - #9 ;
INFO  16:42:06,897 - #2 print
INFO  16:42:06,897 - #10 (
INFO  16:42:06,897 - #4 x
INFO  16:42:06,897 - #40 <
INFO  16:42:06,897 - #5 0
INFO  16:42:06,897 - #49 ?
INFO  16:42:06,897 - #32 -
INFO  16:42:06,897 - #50 :
INFO  16:42:06,897 - #6 +
INFO  16:42:06,897 - #11 )
INFO  16:42:06,897 - #9 ;
INFO  16:42:06,897 - #13 }
INFO  16:42:06,897 - #13 }
