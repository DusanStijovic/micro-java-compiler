
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jan 20 22:55:07 CET 2021
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Wed Jan 20 22:55:07 CET 2021
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\005\010\000\002\002\004\000\002\004" +
    "\003\000\002\003\004\000\002\003\002\000\002\006\003" +
    "\000\002\006\003\000\002\007\006\000\002\010\005\000" +
    "\002\010\003\000\002\011\005\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\023\005\000\002\024" +
    "\005\000\002\024\003\000\002\025\005\000\002\025\003" +
    "\000\002\026\004\000\002\026\003\000\002\027\005\000" +
    "\002\030\005\000\002\030\003\000\002\031\005\000\002" +
    "\031\003\000\002\031\003\000\002\117\003\000\002\032" +
    "\004\000\002\032\002\000\002\033\012\000\002\034\003" +
    "\000\002\034\002\000\002\035\003\000\002\035\003\000" +
    "\002\036\004\000\002\040\003\000\002\040\002\000\002" +
    "\042\005\000\002\042\003\000\002\041\005\000\002\041" +
    "\003\000\002\043\004\000\002\043\002\000\002\044\003" +
    "\000\002\044\002\000\002\045\005\000\002\045\003\000" +
    "\002\047\004\000\002\057\003\000\002\057\002\000\002" +
    "\055\005\000\002\051\003\000\002\052\004\000\002\052" +
    "\003\000\002\052\004\000\002\052\004\000\002\054\004" +
    "\000\002\054\003\000\002\046\005\000\002\037\004\000" +
    "\002\060\003\000\002\060\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\063\003\000\002\064\006\000" +
    "\002\064\003\000\002\066\004\000\002\067\003\000\002" +
    "\065\004\000\002\065\003\000\002\071\005\000\002\071" +
    "\003\000\002\072\003\000\002\073\005\000\002\073\003" +
    "\000\002\074\003\000\002\074\003\000\002\074\003\000" +
    "\002\074\005\000\002\074\003\000\002\074\003\000\002" +
    "\074\005\000\002\075\005\000\002\075\002\000\002\076" +
    "\004\000\002\076\003\000\002\076\003\000\002\101\004" +
    "\000\002\100\004\000\002\100\003\000\002\102\004\000" +
    "\002\077\005\000\002\077\003\000\002\103\003\000\002" +
    "\103\003\000\002\104\004\000\002\104\002\000\002\106" +
    "\005\000\002\106\007\000\002\105\004\000\002\105\007" +
    "\000\002\105\013\000\002\105\010\000\002\105\007\000" +
    "\002\105\004\000\002\105\004\000\002\105\005\000\002" +
    "\105\004\000\002\105\007\000\002\105\005\000\002\116" +
    "\003\000\002\114\004\000\002\115\004\000\002\107\003" +
    "\000\002\112\004\000\002\113\004\000\002\110\005\000" +
    "\002\111\003\000\002\122\004\000\002\122\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\004\005\001\002\000\004\002\330\001" +
    "\002\000\004\065\007\001\002\000\010\011\ufffd\012\ufffd" +
    "\065\ufffd\001\002\000\010\011\uffff\012\uffff\065\uffff\001" +
    "\002\000\010\011\011\012\013\065\017\001\002\000\004" +
    "\065\017\001\002\000\010\011\ufffc\012\ufffc\065\ufffc\001" +
    "\002\000\010\013\uffe4\060\uffe4\065\uffe4\001\002\000\006" +
    "\003\021\065\022\001\002\000\010\011\ufffe\012\ufffe\065" +
    "\ufffe\001\002\000\010\011\ufffb\012\ufffb\065\ufffb\001\002" +
    "\000\056\003\uffe6\005\uffe6\006\uffe6\007\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\065\uffe6\001\002\000\006\005\uffea" +
    "\006\uffea\001\002\000\006\005\uffe7\006\uffe7\001\002\000" +
    "\010\005\uffe8\006\uffe8\016\027\001\002\000\006\005\025" +
    "\006\024\001\002\000\006\003\021\065\022\001\002\000" +
    "\010\011\uffec\012\uffec\065\uffec\001\002\000\006\005\uffeb" +
    "\006\uffeb\001\002\000\004\017\030\001\002\000\006\005" +
    "\uffe9\006\uffe9\001\002\000\010\013\034\060\036\065\017" +
    "\001\002\000\004\065\uffe0\001\002\000\010\013\uffe5\060" +
    "\uffe5\065\uffe5\001\002\000\004\002\001\001\002\000\004" +
    "\014\041\001\002\000\004\065\uffdf\001\002\000\004\065" +
    "\040\001\002\000\004\014\uffde\001\002\000\010\003\043" +
    "\015\uffdc\065\017\001\002\000\004\065\310\001\002\000" +
    "\006\006\uffd8\015\uffd8\001\002\000\004\015\051\001\002" +
    "\000\006\006\uffda\015\uffda\001\002\000\006\006\047\015" +
    "\uffdd\001\002\000\006\003\043\065\017\001\002\000\006" +
    "\006\uffdb\015\uffdb\001\002\000\006\012\uffe1\065\017\001" +
    "\002\000\004\065\301\001\002\000\006\012\uffed\065\uffed" +
    "\001\002\000\006\012\uffe2\065\017\001\002\000\004\012" +
    "\056\001\002\000\030\012\uff98\013\uff98\020\uff98\024\uff98" +
    "\025\uff98\027\uff98\030\uff98\056\uff98\057\uff98\061\uff98\065" +
    "\uff98\001\002\000\030\012\070\013\064\020\067\024\062" +
    "\025\071\027\075\030\102\056\077\057\061\061\066\065" +
    "\063\001\002\000\014\003\270\014\207\045\271\046\274" +
    "\055\272\001\002\000\004\014\264\001\002\000\004\005" +
    "\263\001\002\000\064\003\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\014\uffcf\015\uffcf\016\255\017\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\001\002\000\010\013\uffe3\060\uffe3\065\uffe3" +
    "\001\002\000\004\005\254\001\002\000\022\005\251\014" +
    "\120\034\132\051\127\062\122\063\113\064\124\065\063" +
    "\001\002\000\004\014\247\001\002\000\030\012\uff98\013" +
    "\uff98\020\uff98\024\uff98\025\uff98\027\uff98\030\uff98\056\uff98" +
    "\057\uff98\061\uff98\065\uff98\001\002\000\026\012\uff87\020" +
    "\uff87\024\uff87\025\uff87\027\uff87\030\uff87\056\uff87\057\uff87" +
    "\061\uff87\065\uff87\001\002\000\022\014\120\015\uffd4\034" +
    "\132\051\127\062\122\063\113\064\124\065\063\001\002" +
    "\000\026\012\070\020\067\024\062\025\071\027\075\030" +
    "\102\056\077\057\061\061\066\065\063\001\002\000\006" +
    "\005\uffcb\015\uffcb\001\002\000\004\005\226\001\002\000" +
    "\032\012\uff9a\013\uff9a\020\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\056\uff9a\057\uff9a\061\uff9a\065\uff9a\001" +
    "\002\000\004\014\217\001\002\000\030\012\uff99\013\uff99" +
    "\020\uff99\024\uff99\025\uff99\027\uff99\030\uff99\056\uff99\057" +
    "\uff99\061\uff99\065\uff99\001\002\000\004\015\210\001\002" +
    "\000\004\014\104\001\002\000\032\012\uff9b\013\uff9b\020" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\056\uff9b" +
    "\057\uff9b\061\uff9b\065\uff9b\001\002\000\004\065\063\001" +
    "\002\000\022\003\130\014\120\034\132\051\127\062\122" +
    "\063\113\064\124\065\063\001\002\000\004\005\107\001" +
    "\002\000\022\003\uff89\014\uff89\034\uff89\051\uff89\062\uff89" +
    "\063\uff89\064\uff89\065\uff89\001\002\000\052\005\uffa9\006" +
    "\uffa9\007\uffa9\014\207\015\uffa9\017\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\001\002" +
    "\000\050\005\uffae\006\uffae\007\uffae\015\uffae\017\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054" +
    "\uffae\001\002\000\034\005\uffb7\006\uffb7\015\uffb7\017\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\047\206\001\002\000\050\005\uffac\006\uffac" +
    "\007\uffac\015\uffac\017\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\054\uffac\001\002\000\020\014" +
    "\120\034\132\051\127\062\122\063\113\064\124\065\063" +
    "\001\002\000\050\005\uffb0\006\uffb0\007\uffb0\015\uffb0\017" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\047\uffb0\050\uffb0\051\uffb0\052\201\053" +
    "\202\054\200\001\002\000\026\005\uff9c\015\uff9c\035\171" +
    "\036\176\037\170\040\172\041\174\042\175\043\uff9c\044" +
    "\uff9c\001\002\000\012\005\uff9f\015\uff9f\043\uff9f\044\uff9f" +
    "\001\002\000\020\014\120\034\132\051\127\062\122\063" +
    "\113\064\124\065\063\001\002\000\020\014\120\034\132" +
    "\051\127\062\122\063\113\064\124\065\063\001\002\000" +
    "\050\005\uffab\006\uffab\007\uffab\015\uffab\017\uffab\035\uffab" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab" +
    "\001\002\000\004\065\063\001\002\000\050\005\uffad\006" +
    "\uffad\007\uffad\015\uffad\017\uffad\035\uffad\036\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\047\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\054\uffad\001\002\000\050" +
    "\005\uffa8\006\uffa8\007\uffa8\015\uffa8\017\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\001" +
    "\002\000\020\014\120\034\132\051\127\062\122\063\113" +
    "\064\124\065\063\001\002\000\016\014\120\034\132\062" +
    "\122\063\113\064\124\065\063\001\002\000\010\005\uffa2" +
    "\015\uffa2\044\uffa2\001\002\000\042\005\uffb3\006\uffb3\007" +
    "\uffb3\015\uffb3\017\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\047\uffb3\050\147\051" +
    "\150\001\002\000\004\065\017\001\002\000\006\005\137" +
    "\044\140\001\002\000\042\005\uffb1\006\uffb1\007\uffb1\015" +
    "\uffb1\017\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\047\uffb1\050\uffb1\051\uffb1\001" +
    "\002\000\012\005\uffa3\015\uffa3\043\136\044\uffa3\001\002" +
    "\000\020\014\uff9e\034\uff9e\051\uff9e\062\uff9e\063\uff9e\064" +
    "\uff9e\065\uff9e\001\002\000\004\065\uff88\001\002\000\020" +
    "\014\uffa1\034\uffa1\051\uffa1\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\001\002\000\052\005\uffa5\006\uffa5\007\uffa5\015\uffa5" +
    "\016\142\017\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\047\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\053\uffa5\054\uffa5\001\002\000\020\014\120\034" +
    "\132\051\127\062\122\063\113\064\124\065\063\001\002" +
    "\000\050\005\uffaa\006\uffaa\007\uffaa\015\uffaa\017\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\001\002\000\004\017\145\001\002\000\050\005\uffa6" +
    "\006\uffa6\007\uffa6\015\uffa6\017\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\001\002\000" +
    "\016\014\120\034\132\062\122\063\113\064\124\065\063" +
    "\001\002\000\016\014\uffc4\034\uffc4\062\uffc4\063\uffc4\064" +
    "\uffc4\065\uffc4\001\002\000\016\014\uffc3\034\uffc3\062\uffc3" +
    "\063\uffc3\064\uffc3\065\uffc3\001\002\000\042\005\uffb2\006" +
    "\uffb2\007\uffb2\015\uffb2\017\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\001\002\000\042\005\uffb4\006\uffb4\007\uffb4" +
    "\015\uffb4\017\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\047\uffb4\050\147\051\150" +
    "\001\002\000\004\007\155\001\002\000\020\014\120\034" +
    "\132\051\127\062\122\063\113\064\124\065\063\001\002" +
    "\000\020\014\uffb5\034\uffb5\051\uffb5\062\uffb5\063\uffb5\064" +
    "\uffb5\065\uffb5\001\002\000\032\005\uffb8\006\uffb8\015\uffb8" +
    "\017\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\001\002\000\004\015\160\001\002" +
    "\000\004\012\uff8a\001\002\000\004\012\162\001\002\000" +
    "\030\012\uff98\013\uff98\020\uff98\024\uff98\025\uff98\027\uff98" +
    "\030\uff98\056\uff98\057\uff98\061\uff98\065\uff98\001\002\000" +
    "\030\012\070\013\164\020\067\024\062\025\071\027\075" +
    "\030\102\056\077\057\061\061\066\065\063\001\002\000" +
    "\034\012\uff93\013\uff93\020\uff93\021\uff93\024\uff93\025\uff93" +
    "\026\uff93\027\uff93\030\uff93\056\uff93\057\uff93\061\uff93\065" +
    "\uff93\001\002\000\012\005\uffa0\015\uffa0\043\uffa0\044\uffa0" +
    "\001\002\000\004\015\167\001\002\000\050\005\uffa7\006" +
    "\uffa7\007\uffa7\015\uffa7\017\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\001\002\000\020" +
    "\014\uffbd\034\uffbd\051\uffbd\062\uffbd\063\uffbd\064\uffbd\065" +
    "\uffbd\001\002\000\020\014\uffbf\034\uffbf\051\uffbf\062\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\001\002\000\020\014\uffbc\034" +
    "\uffbc\051\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\001\002" +
    "\000\020\014\120\034\132\051\127\062\122\063\113\064" +
    "\124\065\063\001\002\000\020\014\uffbb\034\uffbb\051\uffbb" +
    "\062\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002\000\020\014" +
    "\uffba\034\uffba\051\uffba\062\uffba\063\uffba\064\uffba\065\uffba" +
    "\001\002\000\020\014\uffbe\034\uffbe\051\uffbe\062\uffbe\063" +
    "\uffbe\064\uffbe\065\uffbe\001\002\000\012\005\uff9d\015\uff9d" +
    "\043\uff9d\044\uff9d\001\002\000\016\014\uffc0\034\uffc0\062" +
    "\uffc0\063\uffc0\064\uffc0\065\uffc0\001\002\000\016\014\uffc2" +
    "\034\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\001\002\000" +
    "\016\014\uffc1\034\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\001\002\000\016\014\120\034\132\062\122\063\113\064" +
    "\124\065\063\001\002\000\050\005\uffaf\006\uffaf\007\uffaf" +
    "\015\uffaf\017\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\001\002\000\012\005\uffa4\015" +
    "\uffa4\043\136\044\uffa4\001\002\000\020\014\uffb6\034\uffb6" +
    "\051\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\001\002\000" +
    "\022\014\uffc5\015\uffc5\034\uffc5\051\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\001\002\000\026\012\070\020\067\024" +
    "\062\025\071\027\075\030\102\056\077\057\061\061\066" +
    "\065\063\001\002\000\032\012\uff97\013\uff97\020\uff97\024" +
    "\uff97\025\uff97\026\uff97\027\uff97\030\uff97\056\uff97\057\uff97" +
    "\061\uff97\065\uff97\001\002\000\034\012\uff9b\013\uff9b\020" +
    "\uff9b\021\214\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\056\uff9b\057\uff9b\061\uff9b\065\uff9b\001\002\000\026\012" +
    "\070\020\067\024\062\025\071\027\075\030\102\056\077" +
    "\057\061\061\066\065\063\001\002\000\026\012\uff83\020" +
    "\uff83\024\uff83\025\uff83\027\uff83\030\uff83\056\uff83\057\uff83" +
    "\061\uff83\065\uff83\001\002\000\032\012\uff96\013\uff96\020" +
    "\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\056\uff96" +
    "\057\uff96\061\uff96\065\uff96\001\002\000\034\012\uff8c\013" +
    "\uff8c\020\uff8c\021\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c" +
    "\030\uff8c\056\uff8c\057\uff8c\061\uff8c\065\uff8c\001\002\000" +
    "\020\014\120\034\132\051\127\062\122\063\113\064\124" +
    "\065\063\001\002\000\006\006\221\015\uff81\001\002\000" +
    "\004\064\225\001\002\000\004\015\223\001\002\000\004" +
    "\005\224\001\002\000\034\012\uff92\013\uff92\020\uff92\021" +
    "\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\056\uff92" +
    "\057\uff92\061\uff92\065\uff92\001\002\000\004\015\uff82\001" +
    "\002\000\034\012\uff8f\013\uff8f\020\uff8f\021\uff8f\024\uff8f" +
    "\025\uff8f\026\uff8f\027\uff8f\030\uff8f\056\uff8f\057\uff8f\061" +
    "\uff8f\065\uff8f\001\002\000\004\026\231\001\002\000\022" +
    "\003\130\014\120\034\132\051\127\062\122\063\113\064" +
    "\124\065\063\001\002\000\004\014\235\001\002\000\004" +
    "\015\233\001\002\000\004\005\234\001\002\000\034\012" +
    "\uff94\013\uff94\020\uff94\021\uff94\024\uff94\025\uff94\026\uff94" +
    "\027\uff94\030\uff94\056\uff94\057\uff94\061\uff94\065\uff94\001" +
    "\002\000\022\003\uff85\014\uff85\034\uff85\051\uff85\062\uff85" +
    "\063\uff85\064\uff85\065\uff85\001\002\000\006\015\uff86\044" +
    "\140\001\002\000\006\006\uffd2\015\uffd2\001\002\000\006" +
    "\006\243\015\uffd5\001\002\000\004\015\242\001\002\000" +
    "\050\005\uffc6\006\uffc6\007\uffc6\015\uffc6\017\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6" +
    "\001\002\000\020\014\120\034\132\051\127\062\122\063" +
    "\113\064\124\065\063\001\002\000\006\006\uffd3\015\uffd3" +
    "\001\002\000\030\012\070\013\246\020\067\024\062\025" +
    "\071\027\075\030\102\056\077\057\061\061\066\065\063" +
    "\001\002\000\034\012\uff8b\013\uff8b\020\uff8b\021\uff8b\024" +
    "\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\056\uff8b\057\uff8b" +
    "\061\uff8b\065\uff8b\001\002\000\022\003\130\014\120\034" +
    "\132\051\127\062\122\063\113\064\124\065\063\001\002" +
    "\000\006\015\uff84\044\140\001\002\000\034\012\uff8d\013" +
    "\uff8d\020\uff8d\021\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d" +
    "\030\uff8d\056\uff8d\057\uff8d\061\uff8d\065\uff8d\001\002\000" +
    "\004\005\253\001\002\000\034\012\uff8e\013\uff8e\020\uff8e" +
    "\021\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\056" +
    "\uff8e\057\uff8e\061\uff8e\065\uff8e\001\002\000\034\012\uff95" +
    "\013\uff95\020\uff95\021\uff95\024\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\056\uff95\057\uff95\061\uff95\065\uff95\001\002" +
    "\000\020\014\uffcd\034\uffcd\051\uffcd\062\uffcd\063\uffcd\064" +
    "\uffcd\065\uffcd\001\002\000\062\003\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\014\uffd1\015\uffd1\017\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054" +
    "\uffd1\055\uffd1\001\002\000\062\003\uffd0\005\uffd0\006\uffd0" +
    "\007\uffd0\014\uffd0\015\uffd0\017\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\055\uffd0\001\002\000\020\014\120\034\132\051\127" +
    "\062\122\063\113\064\124\065\063\001\002\000\004\017" +
    "\262\001\002\000\062\003\uffce\005\uffce\006\uffce\007\uffce" +
    "\014\uffce\015\uffce\017\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\001\002\000\034\012\uff90\013\uff90\020\uff90\021\uff90" +
    "\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\056\uff90\057" +
    "\uff90\061\uff90\065\uff90\001\002\000\004\065\063\001\002" +
    "\000\004\015\266\001\002\000\004\005\267\001\002\000" +
    "\034\012\uff91\013\uff91\020\uff91\021\uff91\024\uff91\025\uff91" +
    "\026\uff91\027\uff91\030\uff91\056\uff91\057\uff91\061\uff91\065" +
    "\uff91\001\002\000\006\005\uffc7\015\uffc7\001\002\000\006" +
    "\005\uffca\015\uffca\001\002\000\020\014\uffb9\034\uffb9\051" +
    "\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\001\002\000\006" +
    "\005\uffcc\015\uffcc\001\002\000\006\005\uffc9\015\uffc9\001" +
    "\002\000\020\014\120\034\132\051\127\062\122\063\113" +
    "\064\124\065\063\001\002\000\006\005\uffc8\015\uffc8\001" +
    "\002\000\006\012\uffee\065\uffee\001\002\000\006\005\ufff1" +
    "\006\ufff1\001\002\000\010\005\uffef\006\uffef\016\306\001" +
    "\002\000\006\005\304\006\303\001\002\000\004\065\301" +
    "\001\002\000\006\012\ufff3\065\ufff3\001\002\000\006\005" +
    "\ufff2\006\ufff2\001\002\000\004\017\307\001\002\000\006" +
    "\005\ufff0\006\ufff0\001\002\000\010\006\uffd6\015\uffd6\016" +
    "\311\001\002\000\004\017\313\001\002\000\006\006\uffd9" +
    "\015\uffd9\001\002\000\006\006\uffd7\015\uffd7\001\002\000" +
    "\004\065\316\001\002\000\006\005\ufff8\006\ufff8\001\002" +
    "\000\004\055\323\001\002\000\006\005\321\006\320\001" +
    "\002\000\004\065\316\001\002\000\010\011\ufffa\012\ufffa" +
    "\065\ufffa\001\002\000\006\005\ufff9\006\ufff9\001\002\000" +
    "\010\062\327\063\326\064\324\001\002\000\006\005\ufff6" +
    "\006\ufff6\001\002\000\006\005\ufff7\006\ufff7\001\002\000" +
    "\006\005\ufff5\006\ufff5\001\002\000\006\005\ufff4\006\ufff4" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\005\003\001\001\000\002\001\001\000" +
    "\004\004\005\001\001\000\004\003\007\001\001\000\002" +
    "\001\001\000\012\006\014\007\011\027\015\117\013\001" +
    "\001\000\004\117\313\001\001\000\002\001\001\000\004" +
    "\032\030\001\001\000\006\030\022\031\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\033" +
    "\032\035\036\036\034\117\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\040\043\041\044\042\045\117\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\047\117\041\001\001\000" +
    "\002\001\001\000\012\023\052\026\053\034\054\117\051" +
    "\001\001\000\006\024\301\025\277\001\001\000\002\001" +
    "\001\000\006\023\276\117\051\001\001\000\002\001\001" +
    "\000\004\104\056\001\001\000\024\037\071\046\073\047" +
    "\057\052\064\103\077\105\102\106\075\107\072\110\100" +
    "\001\001\000\006\054\272\063\274\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\051\257\055\256\057\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\037" +
    "\071\046\124\047\107\064\251\065\111\066\125\071\130" +
    "\072\133\073\114\074\110\001\001\000\002\001\001\000" +
    "\004\104\244\001\001\000\002\001\001\000\032\037\071" +
    "\044\240\045\237\046\124\047\107\064\236\065\111\066" +
    "\125\071\130\072\133\073\114\074\110\001\001\000\024" +
    "\037\071\046\073\047\057\052\064\103\226\105\102\106" +
    "\075\107\072\110\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\037\071\046\073\047\057\052\105\114\104\001" +
    "\001\000\042\037\071\046\124\047\107\064\115\065\111" +
    "\066\125\071\130\072\133\073\114\074\110\076\132\077" +
    "\116\100\134\101\113\102\120\115\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\037\071" +
    "\046\124\047\107\064\115\065\111\066\125\071\130\072" +
    "\133\073\114\074\110\077\116\100\204\102\120\001\001" +
    "\000\004\061\202\001\001\000\004\062\172\001\001\000" +
    "\002\001\001\000\026\037\071\046\124\047\107\064\165" +
    "\065\111\066\125\071\130\072\133\073\114\074\110\001" +
    "\001\000\030\037\071\046\124\047\107\064\115\065\111" +
    "\066\125\071\130\072\133\073\114\074\110\077\164\001" +
    "\001\000\002\001\001\000\012\037\071\046\073\047\057" +
    "\052\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\037\071\046\124\047\107\065\152\071\130\072\133" +
    "\073\114\074\110\001\001\000\020\037\071\046\124\047" +
    "\107\071\151\072\133\073\114\074\110\001\001\000\002" +
    "\001\001\000\004\060\145\001\001\000\004\117\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\142\001\001\000\026\037\071\046\124\047\107" +
    "\064\143\065\111\066\125\071\130\072\133\073\114\074" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\037\071\046\124\047\107\072\150\073" +
    "\114\074\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\145\001\001\000\004\067" +
    "\153\001\001\000\022\037\071\046\124\047\107\065\155" +
    "\071\130\072\133\073\114\074\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\116\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\104\162\001\001\000" +
    "\024\037\071\046\073\047\057\052\064\103\077\105\102" +
    "\106\075\107\072\110\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\037" +
    "\071\046\124\047\107\064\176\065\111\066\125\071\130" +
    "\072\133\073\114\074\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\037" +
    "\071\046\124\047\107\074\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\037\071\046\073\047\057\052\064\103\210\105\211" +
    "\106\075\107\072\110\100\001\001\000\002\001\001\000" +
    "\004\111\212\001\001\000\022\037\071\046\073\047\057" +
    "\052\064\105\215\106\214\107\072\110\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\037\071\046\124\047\107\064\217\065\111\066\125\071" +
    "\130\072\133\073\114\074\110\001\001\000\004\122\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\112\231\113\227\001\001\000\040\037\071\046" +
    "\124\047\107\064\115\065\111\066\125\071\130\072\133" +
    "\073\114\074\110\076\235\077\116\100\134\101\113\102" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\037\071\046\124\047\107\064" +
    "\243\065\111\066\125\071\130\072\133\073\114\074\110" +
    "\001\001\000\002\001\001\000\024\037\071\046\073\047" +
    "\057\052\064\103\077\105\102\106\075\107\072\110\100" +
    "\001\001\000\002\001\001\000\040\037\071\046\124\047" +
    "\107\064\115\065\111\066\125\071\130\072\133\073\114" +
    "\074\110\076\247\077\116\100\134\101\113\102\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\037\071\046\124" +
    "\047\107\064\260\065\111\066\125\071\130\072\133\073" +
    "\114\074\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\037\071\046\124\047\107\064\275" +
    "\065\111\066\125\071\130\072\133\073\114\074\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\316" +
    "\011\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\324\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	errorDetected = false;

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
	
	Boolean errorDetected;
   
  
    public void syntax_error(Symbol cur_token) {
		errorDetected = true;
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		errorDetected = true;
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

 	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        done_parsing();
      	report_error(message, info);
    }






}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OptionalPrintParam ::= 
            {
              OptionalPrintParam RESULT = null;
		 RESULT=new NoAditionalParamPrint(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(80/*OptionalPrintParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OptionalPrintParam ::= COMMA NUMBER 
            {
              OptionalPrintParam RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AditionalParamPrint(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(80/*OptionalPrintParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ElseStart ::= ELSE 
            {
              ElseStart RESULT = null;
		 RESULT=new ElseStart(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*ElseStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IFCondition ::= IF LPAREN Condition 
            {
              IFCondition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IFCondition(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(70/*IFCondition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DoConditionStart ::= WHILE LPAREN 
            {
              DoConditionStart RESULT = null;
		 RESULT=new DoConditionStart(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(73/*DoConditionStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DoCondition ::= DoConditionStart Condition 
            {
              DoCondition RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DoConditionStart D1 = (DoConditionStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Condition C2 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DoCondition(D1, C2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(72/*DoCondition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // StartDoStmt ::= DO 
            {
              StartDoStmt RESULT = null;
		 RESULT=new StartDoStmt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(69/*StartDoStmt*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ForCondition ::= Condition SEMI 
            {
              ForCondition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ForCondition(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(75/*ForCondition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // StartFor ::= DesignatorStatement SEMI 
            {
              StartFor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StartFor(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(74/*StartFor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BeginingStmtFor ::= RPAREN 
            {
              BeginingStmtFor RESULT = null;
		 RESULT=new BeginingStmtFor(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(76/*BeginingStmtFor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Matched ::= LBRACE StatementList RBRACE 
            {
              Matched RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MultipleStatement(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Matched ::= IFCondition RPAREN Matched ElseStart Matched 
            {
              Matched RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		IFCondition I1 = (IFCondition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Matched M2 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ElseStart E3 = (ElseStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched M4 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MatchedStatement(I1, M2, E3, M4); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Matched ::= RETURN SEMI 
            {
              Matched RESULT = null;
		 RESULT=new ReturnNoExpr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Matched ::= RETURN Expr SEMI 
            {
              Matched RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ReturnExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Matched ::= BREAK SEMI 
            {
              Matched RESULT = null;
		 RESULT=new BreakStmt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Matched ::= CONTINUE SEMI 
            {
              Matched RESULT = null;
		 RESULT=new ContinueStmt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Matched RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ReadStmt(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Matched ::= PRINT LPAREN Expr OptionalPrintParam RPAREN SEMI 
            {
              Matched RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		OptionalPrintParam O2 = (OptionalPrintParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new PrintStmt(E1, O2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Matched ::= FOR LPAREN StartFor ForCondition DesignatorStatement BeginingStmtFor LBRACE StatementList RBRACE 
            {
              Matched RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		StartFor S1 = (StartFor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		ForCondition F2 = (ForCondition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int D3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int D3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		DesignatorStatement D3 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int B4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int B4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		BeginingStmtFor B4 = (BeginingStmtFor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S5 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ForStmt(S1, F2, D3, B4, S5); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Matched ::= StartDoStmt Statement DoCondition RPAREN SEMI 
            {
              Matched RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		StartDoStmt S1 = (StartDoStmt)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int D3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		DoCondition D3 = (DoCondition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new DoStmt(S1, S2, D3); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Matched ::= DesignatorStatement SEMI 
            {
              Matched RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MatchedDesignator(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Unmatched ::= IFCondition RPAREN Matched ElseStart Unmatched 
            {
              Unmatched RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		IFCondition I1 = (IFCondition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Matched M2 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ElseStart E3 = (ElseStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int U4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched U4 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedIfElse(I1, M2, E3, U4); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(68/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Unmatched ::= IFCondition RPAREN Statement 
            {
              Unmatched RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		IFCondition I1 = (IFCondition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedIf(I1, S2); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(68/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // StatementList ::= 
            {
              StatementList RESULT = null;
		 RESULT=new NoStmt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(66/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // StatementList ::= StatementList Statement 
            {
              StatementList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StmtList(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(66/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Statement ::= Unmatched 
            {
              Statement RESULT = null;
		int U1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int U1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched U1 = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Statement ::= Matched 
            {
              Statement RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched M1 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ConditionFact ::= Expr 
            {
              ConditionFact RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OneVariableCondition(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*ConditionFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ConditionFact ::= Expr RelationalOperator Expr 
            {
              ConditionFact RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int R2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		RelationalOperator R2 = (RelationalOperator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E3 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TwoVariablesCondition(E1, R2, E3); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*ConditionFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LeftAnd ::= ConditionTerm AND 
            {
              LeftAnd RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConditionTerm C1 = (ConditionTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new LeftAnd(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*LeftAnd*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ConditionTerm ::= ConditionFact 
            {
              ConditionTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConditionFact C1 = (ConditionFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OneConditionAnd(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*ConditionTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ConditionTerm ::= LeftAnd ConditionFact 
            {
              ConditionTerm RESULT = null;
		int L1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		LeftAnd L1 = (LeftAnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConditionFact C2 = (ConditionFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionListAnd(L1, C2); RESULT.setLine(L1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*ConditionTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LeftOr ::= Condition OR 
            {
              LeftOr RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new LeftOr(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*LeftOr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Condition ::= error 
            {
              Condition RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null);   RESULT=new ErrorCondition(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Condition ::= ConditionTerm 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConditionTerm C1 = (ConditionTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OneConditionOr(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Condition ::= LeftOr ConditionTerm 
            {
              Condition RESULT = null;
		int L1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		LeftOr L1 = (LeftOr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConditionTerm C2 = (ConditionTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionListOr(L1, C2); RESULT.setLine(L1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OptionalSquareNewOp ::= 
            {
              OptionalSquareNewOp RESULT = null;
		 RESULT=new NewNonArrayVariable(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*OptionalSquareNewOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OptionalSquareNewOp ::= LSQUARE Expr RSQUARE 
            {
              OptionalSquareNewOp RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new NewArrayVariable(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*OptionalSquareNewOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Factor ::= LPAREN Expr RPAREN 
            {
              Factor RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ExprFactor(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Factor ::= FuncCall 
            {
              Factor RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FuncCall F1 = (FuncCall)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FuncCallFactor(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Factor ::= Designator 
            {
              Factor RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Var(d); RESULT.setLine(dleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Factor ::= NEW Type OptionalSquareNewOp 
            {
              Factor RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		OptionalSquareNewOp O2 = (OptionalSquareNewOp)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NewOperator(T1, O2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Factor ::= BOOLEAN 
            {
              Factor RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String B1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BoolConst(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Factor ::= CHAR 
            {
              Factor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character C1 = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CharConst(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Factor ::= NUMBER 
            {
              Factor RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NumConst(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FactorList ::= Factor 
            {
              FactorList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor F1 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OneFactor(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*FactorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FactorList ::= FactorList MultiplyOperator Factor 
            {
              FactorList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FactorList F1 = (FactorList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MultiplyOperator M2 = (MultiplyOperator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int F3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor F3 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultipleFactors(F1, M2, F3); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*FactorList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Term ::= FactorList 
            {
              Term RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FactorList F1 = (FactorList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermDescription(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TermList ::= Term 
            {
              TermList RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OneTerm(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*TermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TermList ::= TermList AddOperator Term 
            {
              TermList RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		TermList T1 = (TermList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		AddOperator A2 = (AddOperator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int T3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T3 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultipleTerms(T1, A2, T3); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*TermList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr1 ::= TermList 
            {
              Expr1 RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		TermList T1 = (TermList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BasicExpressionWithOutMinus(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*Expr1*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr1 ::= MINUS TermList 
            {
              Expr1 RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		TermList T1 = (TermList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BasicExpressionWithMinus(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*Expr1*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TernarDivider ::= COLON 
            {
              TernarDivider RESULT = null;
		 RESULT=new TernarDivider(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*TernarDivider*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TernarStart ::= Expr1 TERNAR 
            {
              TernarStart RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr1 E1 = (Expr1)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new TernarStart(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*TernarStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr1 
            {
              Expr RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr1 E1 = (Expr1)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NoTernarExpression(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= TernarStart Expr1 TernarDivider Expr1 
            {
              Expr RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		TernarStart T1 = (TernarStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr1 E2 = (Expr1)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int T3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		TernarDivider T3 = (TernarDivider)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr1 E4 = (Expr1)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TernarExpr(T1, E2, T3, E4); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // AssignmentOperator ::= EQUAL 
            {
              AssignmentOperator RESULT = null;
		 RESULT=new AssignOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*AssignmentOperator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RelationalOperator ::= LESS_EQUAL 
            {
              RelationalOperator RESULT = null;
		 RESULT=new LessEqualOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*RelationalOperator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RelationalOperator ::= LESS 
            {
              RelationalOperator RESULT = null;
		 RESULT=new LessOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*RelationalOperator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RelationalOperator ::= GREATER_EQUAL 
            {
              RelationalOperator RESULT = null;
		 RESULT=new GreaterEqualOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*RelationalOperator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RelationalOperator ::= GREATER 
            {
              RelationalOperator RESULT = null;
		 RESULT=new GreaterOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*RelationalOperator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RelationalOperator ::= NOT_EQUAL_COMPARE 
            {
              RelationalOperator RESULT = null;
		 RESULT=new NotEqualOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*RelationalOperator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RelationalOperator ::= EQUAL_COMPARE 
            {
              RelationalOperator RESULT = null;
		 RESULT=new EqualOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*RelationalOperator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MultiplyOperator ::= MOD 
            {
              MultiplyOperator RESULT = null;
		 RESULT=new ModuloOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*MultiplyOperator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MultiplyOperator ::= DIV 
            {
              MultiplyOperator RESULT = null;
		 RESULT=new DivideOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*MultiplyOperator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MultiplyOperator ::= MUL 
            {
              MultiplyOperator RESULT = null;
		 RESULT=new MultiplyOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*MultiplyOperator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AddOperator ::= MINUS 
            {
              AddOperator RESULT = null;
		 RESULT=new MinusOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AddOperator ::= PLUS 
            {
              AddOperator RESULT = null;
		 RESULT=new PlusOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FuncCallStart ::= Designator LPAREN 
            {
              FuncCallStart RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FuncCallStart(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*FuncCallStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FuncCall ::= FuncCallStart OptionalMethodActualParameters RPAREN 
            {
              FuncCall RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FuncCallStart F1 = (FuncCallStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		OptionalMethodActualParameters O2 = (OptionalMethodActualParameters)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FuncCall(F1, O2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*FuncCall*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AssignmentStatement ::= error 
            {
              AssignmentStatement RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);   RESULT=new AssignmentError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*AssignmentStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AssignmentStatement ::= AssignmentOperator Expr 
            {
              AssignmentStatement RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		AssignmentOperator A1 = (AssignmentOperator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AssignmentExpr(A1, E2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*AssignmentStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DesignatorStatement ::= Designator DEC 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DecrementDesignator(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DesignatorStatement ::= Designator INC 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new IncrementDesignator(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DesignatorStatement ::= FuncCall 
            {
              DesignatorStatement RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FuncCall F1 = (FuncCall)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorStatementFunctionCall(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DesignatorStatement ::= Designator AssignmentStatement 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		AssignmentStatement A2 = (AssignmentStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AssignmentStmt(D1, A2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LsquareStart ::= LSQUARE 
            {
              LsquareStart RESULT = null;
		 RESULT=new LsquareStart(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*LsquareStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SpecifeIdentPart ::= LsquareStart Expr RSQUARE 
            {
              SpecifeIdentPart RESULT = null;
		int L1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int L1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		LsquareStart L1 = (LsquareStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ArrayMemberPart(L1, E2); RESULT.setLine(L1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*SpecifeIdentPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OptionalSpecifeIdentPartList ::= 
            {
              OptionalSpecifeIdentPartList RESULT = null;
		 RESULT=new NoIdentParts(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*OptionalSpecifeIdentPartList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OptionalSpecifeIdentPartList ::= SpecifeIdentPart 
            {
              OptionalSpecifeIdentPartList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SpecifeIdentPart S1 = (SpecifeIdentPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IdentParts(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*OptionalSpecifeIdentPartList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Designator ::= IDENT OptionalSpecifeIdentPartList 
            {
              Designator RESULT = null;
		int variableNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int variableNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String variableName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int O1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int O1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		OptionalSpecifeIdentPartList O1 = (OptionalSpecifeIdentPartList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Designator(variableName, O1); RESULT.setLine(variableNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ActualParamDeclarationList ::= Expr 
            {
              ActualParamDeclarationList RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OneActualParamDecl(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*ActualParamDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ActualParamDeclarationList ::= ActualParamDeclarationList COMMA Expr 
            {
              ActualParamDeclarationList RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ActualParamDeclarationList A1 = (ActualParamDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActualParamDeclList(A1, E2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*ActualParamDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OptionalMethodActualParameters ::= 
            {
              OptionalMethodActualParameters RESULT = null;
		 RESULT=new NoMethodActualParams(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*OptionalMethodActualParameters*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OptionalMethodActualParameters ::= ActualParamDeclarationList 
            {
              OptionalMethodActualParameters RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActualParamDeclarationList A1 = (ActualParamDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodActualParams(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*OptionalMethodActualParameters*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OptionalSquareMethodFormalParam ::= 
            {
              OptionalSquareMethodFormalParam RESULT = null;
		 RESULT=new NoArrayFormalParam(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*OptionalSquareMethodFormalParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OptionalSquareMethodFormalParam ::= LSQUARE RSQUARE 
            {
              OptionalSquareMethodFormalParam RESULT = null;
		 RESULT=new ArrayFormalParam(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*OptionalSquareMethodFormalParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FormalParamDeclaration ::= error 
            {
              FormalParamDeclaration RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do ; ili ) u liniji " + lleft, null);   RESULT=new ErrorFormalParamDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*FormalParamDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FormalParamDeclaration ::= Type IDENT OptionalSquareMethodFormalParam 
            {
              FormalParamDeclaration RESULT = null;
		int formalParamTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int formalParamTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type formalParamType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int formalParamNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int formalParamNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String formalParamName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int O1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int O1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		OptionalSquareMethodFormalParam O1 = (OptionalSquareMethodFormalParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParamDecl(formalParamType, formalParamName, O1); RESULT.setLine(formalParamTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*FormalParamDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormalParamDeclarationList ::= FormalParamDeclaration 
            {
              FormalParamDeclarationList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormalParamDeclaration F1 = (FormalParamDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OneFormalParamDecl(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*FormalParamDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FormalParamDeclarationList ::= FormalParamDeclarationList COMMA FormalParamDeclaration 
            {
              FormalParamDeclarationList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FormalParamDeclarationList F1 = (FormalParamDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormalParamDeclaration F2 = (FormalParamDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParamDeclList(F1, F2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*FormalParamDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OptionalMethodFormalParams ::= 
            {
              OptionalMethodFormalParams RESULT = null;
		 RESULT=new NoMethodFormalParams(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*OptionalMethodFormalParams*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OptionalMethodFormalParams ::= FormalParamDeclarationList 
            {
              OptionalMethodFormalParams RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormalParamDeclarationList F1 = (FormalParamDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodFormalParams(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*OptionalMethodFormalParams*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodRetName ::= ReturnType IDENT 
            {
              MethodRetName RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ReturnType R1 = (ReturnType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodRetName(R1, methodName); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*MethodRetName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ReturnType ::= VOID 
            {
              ReturnType RESULT = null;
		 RESULT=new NoReturnType(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ReturnType ::= Type 
            {
              ReturnType RESULT = null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type returnType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FunctionReturnType(returnType); RESULT.setLine(returnTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OptionalMethodsLocalVariablesDeclaration ::= 
            {
              OptionalMethodsLocalVariablesDeclaration RESULT = null;
		 RESULT=new NoMethodLocalVariableDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*OptionalMethodsLocalVariablesDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OptionalMethodsLocalVariablesDeclaration ::= VariableDeclarationList 
            {
              OptionalMethodsLocalVariablesDeclaration RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VariableDeclarationList V1 = (VariableDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodLocalVariableDecl(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*OptionalMethodsLocalVariablesDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodDeclaration ::= MethodRetName LPAREN OptionalMethodFormalParams RPAREN OptionalMethodsLocalVariablesDeclaration LBRACE StatementList RBRACE 
            {
              MethodDeclaration RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		MethodRetName M1 = (MethodRetName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		OptionalMethodFormalParams O2 = (OptionalMethodFormalParams)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int O3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int O3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		OptionalMethodsLocalVariablesDeclaration O3 = (OptionalMethodsLocalVariablesDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S4 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDecl(M1, O2, O3, S4); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodDeclarationList ::= 
            {
              MethodDeclarationList RESULT = null;
		 RESULT=new NoMethodDecList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*MethodDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodDeclarationList ::= MethodDeclarationList MethodDeclaration 
            {
              MethodDeclarationList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclarationList M1 = (MethodDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDeclaration M2 = (MethodDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodDeclList(M1, M2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*MethodDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= IDENT 
            {
              Type RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Type(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(77/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GlobalVariable ::= error 
            {
              GlobalVariable RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Izvrsen oporavak do , ili ; u liniji " + lleft, null);   RESULT=new GlobalVariableError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*GlobalVariable*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GlobalVariable ::= IDENT 
            {
              GlobalVariable RESULT = null;
		int globalVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int globalVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String globalVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new GlobalNoArrayVariable(globalVarName); RESULT.setLine(globalVarNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*GlobalVariable*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GlobalVariable ::= IDENT LSQUARE RSQUARE 
            {
              GlobalVariable RESULT = null;
		int globalVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int globalVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String globalVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new GlobalArrrayVariable(globalVarName); RESULT.setLine(globalVarNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*GlobalVariable*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GlobalVarList ::= GlobalVariable 
            {
              GlobalVarList RESULT = null;
		int G1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int G1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		GlobalVariable G1 = (GlobalVariable)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new GlobalOneVariable(G1); RESULT.setLine(G1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*GlobalVarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GlobalVarList ::= GlobalVarList COMMA GlobalVariable 
            {
              GlobalVarList RESULT = null;
		int G1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int G1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		GlobalVarList G1 = (GlobalVarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int G2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int G2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		GlobalVariable G2 = (GlobalVariable)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new GlobalVariableList(G1, G2); RESULT.setLine(G1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*GlobalVarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GlobalVariableDeclaration ::= Type GlobalVarList SEMI 
            {
              GlobalVariableDeclaration RESULT = null;
		int globalVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int globalVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type globalVarType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int G1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int G1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		GlobalVarList G1 = (GlobalVarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new GlobalVariableDeclaration(globalVarType, G1); RESULT.setLine(globalVarTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*GlobalVariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VariableDeclarationList ::= VariableDeclaration 
            {
              VariableDeclarationList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VariableDeclaration V1 = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OneVarDecl(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*VariableDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VariableDeclarationList ::= VariableDeclarationList VariableDeclaration 
            {
              VariableDeclarationList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VariableDeclarationList V1 = (VariableDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VariableDeclaration V2 = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclList(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*VariableDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Variable ::= IDENT 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NoArrayVariable(varName); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Variable*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Variable ::= IDENT LSQUARE RSQUARE 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ArrrayVariable(varName); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Variable*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarList ::= Variable 
            {
              VarList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Variable V1 = (Variable)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OneVariable(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*VarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarList ::= VarList COMMA Variable 
            {
              VarList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarList V1 = (VarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Variable V2 = (Variable)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VariableList(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*VarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VariableDeclaration ::= Type VarList SEMI 
            {
              VariableDeclaration RESULT = null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type varType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarList V1 = (VarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VariableDecl(varType, V1); RESULT.setLine(varTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*VariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstType ::= BOOLEAN 
            {
              ConstType RESULT = null;
		int assignedValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int assignedValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String assignedValue = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstBooleanType(assignedValue); RESULT.setLine(assignedValueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*ConstType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstType ::= CHAR 
            {
              ConstType RESULT = null;
		int assignedValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int assignedValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character assignedValue = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstCharType(assignedValue); RESULT.setLine(assignedValueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*ConstType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstType ::= NUMBER 
            {
              ConstType RESULT = null;
		int assignedValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int assignedValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer assignedValue = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstIntType(assignedValue); RESULT.setLine(assignedValueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*ConstType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstVariableAssginment ::= IDENT EQUAL ConstType 
            {
              ConstVariableAssginment RESULT = null;
		int VarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int VarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String VarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstType C1 = (ConstType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstVariableAssginment(VarName, C1); RESULT.setLine(VarNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*ConstVariableAssginment*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstList ::= ConstVariableAssginment 
            {
              ConstList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstVariableAssginment C1 = (ConstVariableAssginment)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OneConstDecl(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*ConstList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstList ::= ConstList COMMA ConstVariableAssginment 
            {
              ConstList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstList C1 = (ConstList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstVariableAssginment C2 = (ConstVariableAssginment)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclList(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*ConstList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstDeclaration ::= CONST Type ConstList SEMI 
            {
              ConstDeclaration RESULT = null;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type constType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstList C1 = (ConstList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstVarDecl(constType, C1); RESULT.setLine(constTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*ConstDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ConstVarClassDeclaration ::= GlobalVariableDeclaration 
            {
              ConstVarClassDeclaration RESULT = null;
		int G1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int G1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		GlobalVariableDeclaration G1 = (GlobalVariableDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new GlobalVariableDecl(G1); RESULT.setLine(G1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*ConstVarClassDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ConstVarClassDeclaration ::= ConstDeclaration 
            {
              ConstVarClassDeclaration RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDeclaration C1 = (ConstDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new GlobalConstDecl(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*ConstVarClassDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ConstVarClassDeclarationList ::= 
            {
              ConstVarClassDeclarationList RESULT = null;
		 RESULT=new NoConstVarClassDeclList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*ConstVarClassDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ConstVarClassDeclarationList ::= ConstVarClassDeclarationList ConstVarClassDeclaration 
            {
              ConstVarClassDeclarationList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstVarClassDeclarationList C1 = (ConstVarClassDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstVarClassDeclaration C2 = (ConstVarClassDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstVarClassDeclList(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*ConstVarClassDeclarationList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              ProgramName RESULT = null;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramName(programName); RESULT.setLine(programNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*ProgramName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgramName ConstVarClassDeclarationList LBRACE MethodDeclarationList RBRACE 
            {
              Program RESULT = null;
		int pObjNodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pObjNoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ProgramName pObjNode = (ProgramName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ConstVarClassDeclarationList C1 = (ConstVarClassDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclarationList M2 = (MethodDeclarationList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program(pObjNode, C1, M2); RESULT.setLine(pObjNodeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

