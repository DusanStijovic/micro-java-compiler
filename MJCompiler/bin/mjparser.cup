

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/*TERMINALI*/
terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, COMMA, PRINT, VOID;
terminal IF, ELSE, LSQUARE, RSQUARE, BREAK, CLASS, ENUM, CONST, SWITCH, DO, WHILE, NEW, READ;
terminal EXTENDS, CONTINUE, CASE, MINUS, MUL, DIV, EQUAL_COMPARE, NOT_EQUAL_COMPARE, MOD;
terminal GREATER, GREATER_EQUAL, LESS, LESS_EQUAL, AND, OR, INC, DEC, DOT, TERNAR, COLON;

terminal  BOOLEAN;
terminal  CHAR;
terminal Integer NUMBER;
terminal String IDENT;


/*NETERMINALI*/
nonterminal Program, VarDeclList, MethodDeclList, VarDecl, Type, MethodDecl;
nonterminal FormPars, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Designator, Expr, Term, AddOp, Factor, ActualPars, ActualParamList;
nonterminal Matched, Unmatched, VarList, Variable, VarType, ClassDecl, ConstDecl;
nonterminal ConstList, ConstVariable, ConstType, GroupDeclList, ExtendClassOption;
nonterminal OptionalMethodsList, ReturnType, OptionalSquare, MulOp, RelOp;
nonterminal SpecifeIdentPartList, SpecifeIdentPart, AssignOp, DesignatorPart;
nonterminal DesignatorStatement, TermList, OptionalSquareNewOp, OptioanalActualPars;
nonterminal FactorList, Expr1, OptionalMinusVar, ConditionFact, OptionalSecondCondtionVar;
nonterminal ConditionFactList, ConditionTerm, ConditionTermList, Condition, OptionalPrintParam;
nonterminal CaseStatement, CaseStatementList;

/*PROGRAM*/
Program ::= (Program) PROG IDENT GroupDeclList LBRACE MethodDeclList RBRACE;


GroupDeclList ::= (GroupVarDeclarations) GroupDeclList VarType
			 | 
             (NoVarDecl)/*epsilon*/
             ; 

VarType ::= (ConstDeclarationGlobalVariables) ConstDecl
		| (VariableDeclarationGlobalVariables) VarDecl
		| (CLassDeclaration) ClassDecl
		;
		
VarDeclList ::= (VariableDeclarationClassMembers) VarDeclList VarDecl
			| /*epsilon*/
			;
		
ClassDecl ::= (ClassDefinition) CLASS IDENT:className ExtendClassOption LBRACE VarDeclList OptionalMethodsList RBRACE
			;
			

ExtendClassOption ::= (ExtensionClass) EXTENDS Type:classExtendType
				| (NoExtensionClass) /*epsilon*/
				;
		
OptionalMethodsList ::= (ClassMethods)LBRACE MethodDeclList RBRACE
				| /*epsilon*/
				;
			

/*Constant*/		
ConstDecl ::=  (ConstDecl) CONST Type:constType ConstList SEMI
			;
			
ConstList ::= (MultipleConst)  ConstList  COMMA ConstVariable
			| (OneConst) ConstVariable
			;

			
ConstVariable ::= (ConstVarAssignment) IDENT:VarNum EQUAL ConstType
			;
			
ConstType ::= (ConstVarType) NUMBER 
			| (CharType) CHAR
			| (BooleanType) BOOLEAN
			;

/*Variable*/
VarDecl ::= (VarDeclOne) Type:varType VarList SEMI
		|
		(ErrorGlobalDecl) error:l SEMI
		 {: parser.report_error("Izvrsen oporavak do greska 2 ; u liniji  " + lleft, null);  :}
		|
		(ErrorGlobalDecl) error:l  
		 {: parser.report_error("Izvrsen oporavak do greska 2 ; u liniji  " + lleft, null);  :}
		;
		

VarList ::= (MultipleVariables) VarList COMMA Variable
			| 
			(OneVar) Variable
			;
			
Variable ::= (ArrrayVariable) IDENT:varName LSQUARE RSQUARE
		|
		(NoArrayVariable) IDENT:varName
		|
		(ErrorCommaVariable) error:l
    	{: parser.report_error("Izvrsen oporavak do  greska 1; u liniji " + lleft, null);  :}
		;

			
Type ::= (Type) IDENT:typeName;


/*Methods*/
MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) ReturnType IDENT:methName LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE;
ReturnType ::= (FunctionReturnType)Type:retType
			| (NoReturnType)VOID
			;
			
/*Formal Parameters*/
FormPars ::= (FormParams) FormalParamList
		  |
		  (NoFormParam) /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;
				
FormalParamDecl ::= (FormalParamDecl) Type:varType IDENT:formalParamName OptionalSquare;

OptionalSquare ::= (ArrayFormalParam)LSQUARE RSQUARE
				|(NoArrayFormalParam)/*epsilon*/
				;				
				
		
/*STATEMENT*/


Statement ::= (MatchedStmt) Matched
		   |
		   (UnmatchedStmt) Unmatched
		   ; 
		   
StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;

Unmatched ::= (UnmatchedIf) IF LPAREN Condition RPAREN Statement
		 	|
		 	(UnmatchedIfElse) IF  LPAREN Condition RPAREN Matched ELSE Unmatched
		 	;

/*if (a==3 || b--*/

Matched ::= (Assignment) DesignatorStatement SEMI
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		   |
		   (DoStatement) DO Statement WHILE LPAREN Condition RPAREN SEMI
		   |
		   (PrintStmt) PRINT LPAREN Expr OptionalPrintParam RPAREN SEMI
		   |
		   (ReadStmt) READ LPAREN Designator RPAREN SEMI
		   |
		   (ContinueStmt) CONTINUE SEMI
		   |
		   (BreakStmt) BREAK SEMI
		   |
		   (ReturnExpr) RETURN Expr:t SEMI
		   |
		   (ReturnNoExpr) RETURN SEMI
		   |
		   (MatchedStatement) IF LPAREN Condition RPAREN Matched ELSE Matched
		   |
		   (MultipleStatement) LBRACE StatementList RBRACE
		   |
		   (SwithStmt) SWITCH LPAREN Expr RPAREN LBRACE CaseStatementList RBRACE
		   ;
		   
/*CASE STATEMENT*/
CaseStatementList ::= (CaseStatementsList) CaseStatementList CaseStatement
				| (StopCaseStatements) /*epsilon*/
				;

CaseStatement ::= (CaseStatement) CASE NUMBER COLON StatementList
				;	

OptionalPrintParam ::= (AditionalParamPrint) COMMA NUMBER
						| (NoAditionalParamPrint) /*epsilon*/
						; 


/*CONDITION*/
Condition ::= (Conditionn) ConditionTerm ConditionTermList
			|
			(ConditionnError) error:l
			{: parser.report_error("Izvrsen oporavak u uslovu IF-a; u liniji " + lleft, null);  :}
			;

ConditionTermList ::= (ConditionListOr) ConditionTermList OR ConditionTerm
				|
				(StopConditionListOr)/*epislon*/
				;

ConditionTerm ::= (ConditionsAnd) ConditionFact ConditionFactList
				;				

ConditionFactList ::=  (ConditionListAnd) ConditionFactList AND ConditionFact
					|
					(StopConditionListAnd) /*epsilon*/
					;

ConditionFact ::= (VarCondition)  Expr OptionalSecondCondtionVar 
				;
				
OptionalSecondCondtionVar ::= (SecondConditionVariable) RelOp Expr
							;
			
	

/*Expression*/
Expr ::= (TernarOp) Expr1 TERNAR Expr1 COLON Expr1
	| (BasicExp) Expr1
	;
			
Expr1 ::= (ExprState) OptionalMinusVar Term:te TermList
	 ;
	 
OptionalMinusVar ::= (HaveMinus) MINUS
	 			| (DoNotHaveMinus) /*epsilon*/
	 			;
	 
TermList ::= (TemList) TermList AddOp Term:te
		| (EndTermList) /*epsilon*/
		;



/*TERM*/
Term ::= (Term) Factor:t FactorList;

FactorList ::= (HaveTermList) FactorList MulOp:mulOp Factor:t
		| (DoNotHaveTermList) /*epsilon*/
		;


/*FACTOR*/
Factor ::= (NumConst) NUMBER
		| (CharConst) CHAR
		| (BoolConst) BOOLEAN
		| (NewOperator) NEW Type  OptionalSquareNewOp
		| (Var) Designator:d
		| (FuncCall) Designator:func LPAREN OptioanalActualPars RPAREN
		| (ExprFactor) LPAREN Expr RPAREN
		;
		
OptionalSquareNewOp ::= (NewArrayVariable)  LSQUARE Expr RSQUARE
 					| (NewNonArrayVariable) /*epsilon*/
 					;



/*ACTUAL PARAMETERS*/ 
ActualPars ::= (Actuals) ActualParamList
			;
		
OptioanalActualPars ::= (HaveActualPars) ActualPars
				| (DoNotHaveActualPars) /*epsilon*/
				;
				
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr
				;
				
				
				
/*DESIGNATOR*/

Designator ::= (Designator) IDENT:name SpecifeIdentPartList
			;

SpecifeIdentPartList ::= (IdentPartList) SpecifeIdentPartList SpecifeIdentPart
						|
						(NoPartList) /*epsilon*/
						;
					
SpecifeIdentPart ::= (ClassMemberName) DOT IDENT:varPartName
					|
					 (ArrayMembeName) LSQUARE Expr RSQUARE	
					;
				
DesignatorStatement ::= (DesignatorStatement) Designator DesignatorPart
					;
					
DesignatorPart ::=  (AssignmentOp) AssignOp Expr
				|	(MetodCall) LPAREN OptioanalActualPars RPAREN
				|	(Increment) INC
				|	(Decrement) DEC
				;
				
				
/*OPERATORI*/

AddOp ::= (Plus) PLUS
		| (Minus) MINUS
		;
		
MulOp ::= (Multiply) MUL
		| (Divide) DIV
		| (Modulo) MOD
		;
		
RelOp ::= (EqualOp) EQUAL_COMPARE
		| (NotEqualOp) NOT_EQUAL_COMPARE
		| (GreaterOp) GREATER
		| (GreaterEqualOp) GREATER_EQUAL
		| (LessOp) LESS
		| (LessEqualOp) LESS_EQUAL
		;
		
AssignOp ::= (AssignOp) EQUAL
		;









		